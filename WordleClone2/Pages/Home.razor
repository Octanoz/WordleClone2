@page "/"

@using WordleClone2.Components.Model
@using WordleClone2.Components.Services

@inject DictionaryService dictionaryService
@inject IJSRuntime JSRuntime

<PageTitle>Wordle</PageTitle>

<section id="top-bar">
    <h1>Wordle Clone</h1>
    <button type="button" @onclick="ResetGame" class="reset-button" tabindex="1">Reset</button>
</section>

<section id="main-wrapper">
    <div class="game" @onkeydown="@(HandleKeyDown)" tabindex="0" @ref="gameElement">
        <ul class="attempts-list">
            @if (guesses is not null && colors is not null)
            {
                @for (int attemptIndex = 0; attemptIndex < guesses?.Length; attemptIndex++)
                {
                    @* int localAttemptIndex = attemptIndex; *@
                    <li class="attempt">
                        @for (int i = 0; i < 5; i++)
                        {
                            <div class="letter-square @(currentGuess > attemptIndex ? "checking" : "")" style="--d: @(i); background: var(@(colors[attemptIndex][i]));">
                                @if (guesses.Length > attemptIndex && guesses[attemptIndex].Length > i)
                                {
                                    <p class="input-letter">@guesses[attemptIndex][i]</p>
                                }
                            </div>
                        }
                    </li>
                }
            }
        </ul>
    </div>
    <section class="word-definition @(wordDefinitionClass)">
        @if (currentWordDefinition is not null)
        {
            <h3>@(currentWordDefinition.Word)</h3>
            <h5>@(currentWordDefinition.Meanings[0].PartOfSpeech)</h5>
            <p>@(currentWordDefinition.Meanings[0].Definitions[0].Defined)</p>
        }
        else
        {
            <h3>word not found</h3>
            <h5>noun?</h5>
            <p class="definition">Delete some letters and try again on the same attempt.</p>
        }
    </section>
    <div class="keyboard">
        <div class="row top-row">
            @foreach (var letter in topRow)
            {
                <button type="button" @onclick="() => AddLetter(letter)" class="key @GetKeyClass(letter)">@letter</button>
            }
        </div>
        <div class="row middle-row">
            @foreach (var letter in middleRow)
            {
                <button type="button" @onclick="() => AddLetter(letter)" class="key @GetKeyClass(letter)">@letter</button>
            }
        </div>
        <div class="row bottom-row">
            <button type="button" @onclick="() => CheckWord(guesses?[currentGuess])" class="key small-key">ENTER</button>
            @foreach (var letter in bottomRow)
            {
                <button type="button" @onclick="() => AddLetter(letter)" class="key @GetKeyClass(letter)">@letter</button>
            }
            <button type="button" @onclick="RemoveLetter" class="key small-key">DEL</button>
        </div>
    </div>
</section>

@if (showGameCompleteModal)
{
    <GameCompleteModal
        Title="@(playerWins ? "You win!" : "Game Over")"
        TargetWord="@word"
        GuessCount="@currentGuess"
        PlayerWins="@playerWins"
        WordDefinition="targetWordDefinition"
        OnClose="ResetGame" />
}

@code {
    static readonly char[] topRow = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'];
    static readonly char[] middleRow = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'];
    static readonly char[] bottomRow = ['Z', 'X', 'C', 'V', 'B', 'N', 'M'];
    static readonly string[] wordsArray = ["INNER", "BONUS", "RIDER", "LUNAR", "FLOWS", "NYMPH", "JUMPY", "CRISP", "PLAZA", "QUART", "QUICK", "SMITE", "KNOLL"];

    bool showGameCompleteModal = false;
    bool playerWins = false;

    //The definition of the guessed word if available in the dictionary api
    WordDefinition? currentWordDefinition;
    WordDefinition? targetWordDefinition;
    string? word;
    int currentGuess = 0;

    //Individual lines for guessing the word
    readonly char[][] guesses = Enumerable.Range(0, 6).Select(_ => new char[5]).ToArray();

    //Storing the CSS custom property strings to apply to each cell in each row
    readonly string[][] colors = Enumerable.Range(0, 6).Select(_ => new string[5]).ToArray();

    //Dictionary to store the state of each key
    private readonly Dictionary<char, string> keyStates = [];

    ElementReference gameElement;
    string wordDefinitionClass = "";

    private async Task InitializeGame()
    {
        word = wordsArray[Random.Shared.Next(0, wordsArray.Length)];
        for (int i = 0; i < guesses.Length; i++)
        {
            //initial state, all cells empty, all keyboard keys in grey
            Array.Fill(guesses[i], ' ');
            Array.Fill(colors[i], "--empty");

            wordDefinitionClass = "";
            playerWins = false;
        }

        //Set key states initial state
        foreach (var letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        {
            keyStates[letter] = "";
        }

        currentGuess = 0;
        currentWordDefinition = await dictionaryService.GetWordDefinitionAsync("guess");
        targetWordDefinition = await dictionaryService.GetWordDefinitionAsync(word.ToLower());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeGame();
            await gameElement.FocusAsync();
            StateHasChanged();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Backspace":
                RemoveLetter();
                break;
            case "Enter":
                await CheckWord(guesses[currentGuess]);
                break;
            default:
                if (e.Key.Length == 1 && Char.IsLetter(e.Key[0]))
                {
                    AddLetter(Char.ToUpper(e.Key[0]));
                }
                break;
        }
    }

    void AddLetter(char c)
    {
        if (playerWins)
            return;

        int emptyIndex = Array.IndexOf(guesses[currentGuess], ' ');
        if (emptyIndex >= 0)
        {
            guesses[currentGuess][emptyIndex] = c;
        }
    }

    void RemoveLetter()
    {
        if (playerWins)
            return;

        int emptyIndex = Array.IndexOf(guesses[currentGuess], ' ');
        if (emptyIndex > 0)
        {
            guesses[currentGuess][emptyIndex - 1] = ' ';
        }
        else if (emptyIndex is -1)
        {
            guesses[currentGuess][4] = ' ';
        }
    }

    async Task CheckWord(char[]? guess)
    {
        ArgumentNullException.ThrowIfNull(word);
        if (guess is null || !guess.All(Char.IsLetter) || currentGuess >= 6 || playerWins)
            return;

        string guessedWord = new string(guess).ToLower();
        currentWordDefinition = await dictionaryService.GetWordDefinitionAsync(guessedWord);
        if (currentWordDefinition is null)
        {
            await TriggerFlashAnimation();
            return;
        }

        colors[currentGuess] = EvaluateGuess(guess, word);
        currentGuess++;

        if (guessedWord == word.ToLower())
        {
            playerWins = true;
            StateHasChanged();
            await Task.Delay(1000);
            ShowGameCompleteModal(playerWins);
            return;
        }
        else if (currentGuess is 6)
        {
            StateHasChanged();
            await Task.Delay(500);
            ShowGameCompleteModal(playerWins);
            return;
        }

        StateHasChanged();
    }

    private string[] EvaluateGuess(char[] guess, string targetWord)
    {
        string[] cellColors = Enumerable.Repeat(WordleColors.GreyCell, 5).ToArray(); //Set all cells to grey
        Dictionary<char, int> targetLetters = targetWord.GroupBy(c => c).ToDictionary(g => g.Key, g => g.Count());

        //First check for greens
        for (int i = 0; i < 5; i++)
        {
            char letter = guess[i];
            if (letter == targetWord[i])
            {
                cellColors[i] = WordleColors.GreenCell;
                keyStates[letter] = WordleColors.GreenKey;
                targetLetters[letter]--;
            }
        }

        //Second pass, assign yellow
        for (int i = 0; i < 5; i++)
        {
            if (cellColors[i] is WordleColors.GreenCell) // Don't overwrite greens
                continue;

            char letter = guess[i];
            if (targetLetters.TryGetValue(letter, out int count) && count > 0)
            {
                cellColors[i] = WordleColors.YellowCell;
                keyStates[letter] = WordleColors.YellowKey;
                targetLetters[letter]--;
            }
            else
            {
                keyStates[letter] = WordleColors.BlackKey;
            }
        }

        return cellColors;
    }

    //Helper method to get the key class based on its state
    private string GetKeyClass(char letter) => keyStates.GetValueOrDefault(letter, "");

    private void ShowGameCompleteModal(bool wordGuessed)
    {
        playerWins = wordGuessed;
        showGameCompleteModal = true;
        StateHasChanged();
    }

    private async Task TriggerFlashAnimation()
    {
        wordDefinitionClass = "border-red";
        StateHasChanged();

        await Task.Delay(1600);

        wordDefinitionClass = "";
        StateHasChanged();
    }

    private async Task ResetGame()
    {
        await InitializeGame();
        await gameElement.FocusAsync();
    }
}
